# -*- coding: utf-8 -*-
"""OTHELLO_PROJECT_TEAM6.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ykKX1hqYAVqAq7ozLwdqRau4yg-lJker
"""

from ast import literal_eval as eval
class Othello:
    board_size = 8
    BLACK = 'B'
    WHITE = 'W'
    EMPTY = '*'
    offsets = ((0,1),(1,1),(1,0),(1,-1),(0,-1),(-1,-1),(-1,0),(-1,1))
    def __init__(self):
        self.board = self.create_board()
    def inverse(self,piece):
        return Othello.BLACK if piece is Othello.WHITE else Othello.WHITE
    def instructions(self):
        print('''
    Othello, is a strategy board game for two players.'''\
            )
        input('\nPress Enter to continue...')
    def create_board(self):
        self.board = [[Othello.EMPTY for x in range(Othello.board_size)] for x in range(Othello.board_size)]
        self.board[3][3] = Othello.WHITE
        self.board[4][4] = Othello.WHITE
        self.board[3][4] = Othello.BLACK
        self.board[4][3] = Othello.BLACK
        return self.board
    def print_board(self):
        for row in range(len(self.board)):
            print(*self.board[row], sep='  ')
        return self.board 
    
        
    def start_game(self):
        if input('Display instructions? [Y/N]: ').lower() == 'y':
            self.instructions()
        self.board = self.create_board()
        piece = Othello.BLACK
        while self.has_valid_move(self.board, piece):
            self.game_loop(self.board, piece)
            if self.has_valid_move(self.board, self.inverse(piece)):
                piece = self.inverse(piece)
        self.last_game()
    def last_game(self):
        black, white = 0,0
        for row in self.board:
            for token in row:
                if token is Othello.WHITE: white += 1
                if token is Othello.BLACK: black += 1
        if black == white:
            print("It's a tie!")
            print()
        elif black > white:
            print('Winner is Black')
            print()
        else:
            print('Winner is white')
      
        return

    def has_valid_move(self,board, piece):
        for y in range(Othello.board_size):
            for x in range(Othello.board_size):
                if self.is_valid_move(board, piece, (y,x)): 
                    return True
        return False
    def is_valid_move(self,board, piece, move):
        if board[move[0]][move[1]] is not Othello.EMPTY: return False
        for offset in Othello.offsets:
            check = [move[0]+offset[0], move[1]+offset[1]]
            while 0<=check[0]<Othello.board_size-1 and 0<=check[1]<Othello.board_size-1 and \
                board[check[0]][check[1]] is self.inverse(piece):
                check[0] += offset[0]
                check[1] += offset[1]
                if board[check[0]][check[1]] is piece:
                    return True
        return False
    def game_loop(self,board, piece):
        print()
        self.print_board()
        
        while(True):
            try:
                move =eval(input('Place %s where? ' % piece))
                move = tuple(reversed(move))
                # x,y -> y,x (easier to use)
                if self.is_valid_move(board, piece, move):
                    self.place_piece(board, piece, move)
                    return 
                else:
                    raise AssertionError
            except (TypeError, ValueError, IndexError, SyntaxError, AssertionError):
                #   ------------------bad  input------------------  ---bad move---
                print('Invalid move. Try again.')
    def place_piece(self,board, piece, move):
        board[move[0]][move[1]] = piece
        for offset in Othello.offsets:
            check = [move[0]+offset[0], move[1]+offset[1]]
            while 0<=check[0]<self.board_size and 0<=check[1]<self.board_size:
                if board[check[0]][check[1]] is Othello.EMPTY: break
                if board[check[0]][check[1]] is piece:
                    self.flip(board, piece, move, offset)
                    break
                check[0] += offset[0]
                check[1] += offset[1]
        return
    def flip(self,board, piece, move, offset):
        check = [move[0]+offset[0], move[1]+offset[1]]
        while(board[check[0]][check[1]] is self.inverse(piece)):
            board[check[0]][check[1]] = piece
            check[0] += offset[0]
            check[1] += offset[1]
        return 
    

    

o = Othello()
o.print_board()
o.start_game()

